#include <iostream>
#include <unistd.h>

using namespace std;
// float Y[] = {10,20,30,40,50,60,70,80,90,93};
// float Y_2[] = {0,5,7,10,12,14,15,18,20,25};
// float table[][] = {
// {0,2.1,3.3,5,6.5,7.6,8.7,10,11.1,11.1},
// {0,3.1,4.6,6.5,8.2,9.1,10.4,11.8,13.1,13.1},
// {0,3.8,5.4,7.2,8.9,9.9,11.4,12.8,14.2,14.2},
// {0,4.2,5.6,7.7,9.8,11.7,13.8,16,17.7,17.8},
// {0,4.4,6,9.4,12.1,13.3,15.2,17.4,19.2,19.2},
// {0,4.7,7.4,10.3,12.9,15.6,18.4,21.2,23.4,23.5},
// {0,5.4,7.8,11.8,15.6,17.5,19.9,22.4,24.7,24.8},
// {0,6,8.9,13.3,16.2,17.6,20,22.5,24.9,24.9}
// };

// float Y[] = {10,20,30,40,50,60,70,80,90,93};
// float Y_2[] = {0,5,7,10,12,15,18,20,25,28};
// float table[8][10] = {
// {0,2.5,3.8,5.8,7.5,9,10.3,11.6,12.3,12.3},
// {0,3.7,5.4,7.6,9.6,11.4,12.8,13.9,14.7,14.5},
// {0,4.6,6.3,8.5,10.6,12.4,13.9,15.2,16.1,15.7},
// {0,5.2,6.6,9.1,11.4,13.6,15.8,17.9,19.6,19.7},
// {0,5.3,7.1,10.9,14,16.7,18.7,20.4,21.4,21.3},
// {0,5.7,8.7,12,15,18,21,24,26,26},
// {0,6.6,9.1,13.7,17.9,21.7,24.4,26.8,28.1,27.4},
// {0,7.3,10.4,15.5,19.4,22.5,24.9,27.1,28.3,27.6}
// };

float Y[] = {10,20,30,40,50,60,70,80,90,93};
float Y_2[] = {0,2,3,4,5,6,7,8,9,10,12,15};
float table[11][10] = {
{0,0,1.1,1.8,2.7,3.4,4.7,5.2,5.6,5.6},
{0,0,2,3,4.2,5.3,7.1,7.6,8.2,8},
{0,0,2.8,4,5.2,6.4,8.5,9.1,9.7,9.4},
{0,0,3.2,4.5,5.8,7.1,9.4,10,10.9,10.7},
{0,0,3.6,5,6.6,7.9,10.4,10.9,11.4,10.9},
{0,0,3.9,5.4,6.9,8.4,11,11.7,13.3,13.6},
{0,0,4.1,6,8.1,10,13.4,14.3,14.9,14.5},
{0,0,4.4,6.4,8.7,10.5,13.8,14.6,15.3,14.8
},
{0,0,4.9,7.1,8.9,10.7,14.1,14.7,15.4,14.9
},
{0,0,5.3,7.3,9,10.9,14.2,14.9,15.6,15.1
},
{0,0,5.5,7.5,9.1,11,14.4,15,15.7,15.2
}
};
/*
三维面处理
已知三维面，已知任意两参数，可得到固定第三个参数值
*/
int Three_D(){
    for (int i = 0; i < sizeof(table) / sizeof(table[0]); ++i) { // table[]
        for (int j = 0; j < sizeof(Y_2) / sizeof(Y_2[0]); ++j){ // Y_2[]
            for (int z = 0; z <sizeof(table[0]) / sizeof(table[0][0]); ++z){ // tbale[][]
                if(Y_2[j] < table[i][z]) {
                    float num = Y[z-1] + ((Y[z] - Y[z-1])/(table[i][z] - table[i][z-1]))*(Y_2[j] - table[i][z-1]);
                    // cout << Y[z-1] << " " << num << " " << Y[z] << endl;
                    // cout << table[i][z-1] << " " << Y_2[j] << " " << table[i][z] << endl;
                    cout << num << ",";
                    break;
                }
                if(z == 9){
                    cout << "100,";
                }
            }
        }
        cout << endl;
    }
    cout << sizeof(Y_2) / sizeof(Y_2[0]) << endl;
    return 1;
}